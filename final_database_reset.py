#!/usr/bin/env python3
"""
Verificaci√≥n final del estado de la base de datos y reset completo
"""

import os
import sys
import psycopg2
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de la base de datos
db_config = {
    'host': os.getenv('DB_HOST'),
    'database': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'port': os.getenv('DB_PORT', 5432)
}

print("üîß Reset final de base de datos y secuencias...")

try:
    conn = psycopg2.connect(**db_config)
    cur = conn.cursor()
    
    print("\nüóëÔ∏è LIMPIEZA COMPLETA DE TODAS LAS TABLAS:")
    
    # Lista de tablas a limpiar (en orden por foreign keys)
    tables_to_clean = [
        'file_metadata',
        'differences_metadata', 
        'vehicle_info',
        'solutions'
    ]
    
    for table in tables_to_clean:
        try:
            cur.execute(f"TRUNCATE TABLE {table} RESTART IDENTITY CASCADE")
            print(f"  ‚úÖ {table} truncada")
        except Exception as e:
            print(f"  ‚ö†Ô∏è {table}: {e}")
    
    print("\nüîÑ RESET DE SECUENCIAS CON RESTART IDENTITY:")
    
    sequences = ['solutions_id_seq', 'vehicle_info_id_seq', 'file_metadata_id_seq']
    
    for seq_name in sequences:
        try:
            cur.execute(f"ALTER SEQUENCE {seq_name} RESTART WITH 1")
            print(f"  ‚úÖ {seq_name} reiniciada a 1")
        except Exception as e:
            print(f"  ‚ö†Ô∏è {seq_name}: {e}")
    
    # Commit todas las operaciones
    conn.commit()
    
    print("\nüìä VERIFICACI√ìN FINAL:")
    
    for seq_name in sequences:
        cur.execute(f"SELECT last_value, is_called FROM {seq_name}")
        result = cur.fetchone()
        if result:
            last_value, is_called = result
            print(f"  {seq_name}: last_value={last_value}, is_called={is_called}")
    
    for table in tables_to_clean:
        cur.execute(f"SELECT COUNT(*) FROM {table}")
        count = cur.fetchone()[0]
        print(f"  {table}: {count} registros")
    
    print("\nüîç PRUEBA DE INSERCI√ìN REAL:")
    
    # Probar inserci√≥n real de una solution
    try:
        cur.execute("""
            INSERT INTO vehicle_info (
                vehicle_type, make, model, engine, year, 
                hardware_number, software_number, transmission_type
            ) VALUES (
                'TEST', 'TEST', 'TEST', 'TEST', 2024,
                'TEST', 'TEST', 'TEST'
            ) RETURNING id
        """)
        vehicle_info_id = cur.fetchone()[0]
        print(f"  ‚úÖ vehicle_info insertado con ID: {vehicle_info_id}")
        
        cur.execute("""
            INSERT INTO solutions (
                vehicle_info_id, description, status
            ) VALUES (
                %s, 'TEST SOLUTION', 'active'
            ) RETURNING id
        """, (vehicle_info_id,))
        solution_id = cur.fetchone()[0]
        print(f"  ‚úÖ solution insertada con ID: {solution_id}")
        
        # Limpiar la prueba
        cur.execute("DELETE FROM solutions WHERE id = %s", (solution_id,))
        cur.execute("DELETE FROM vehicle_info WHERE id = %s", (vehicle_info_id,))
        
        # Resetear secuencias de nuevo despu√©s de la prueba
        cur.execute("ALTER SEQUENCE solutions_id_seq RESTART WITH 1")
        cur.execute("ALTER SEQUENCE vehicle_info_id_seq RESTART WITH 1")
        
        conn.commit()
        
        print(f"  ‚úÖ Prueba exitosa - Se cre√≥ solution con ID {solution_id}")
        print(f"  ‚úÖ Datos de prueba eliminados, secuencias reseteadas")
        
    except Exception as e:
        print(f"  ‚ùå Error en prueba de inserci√≥n: {e}")
        conn.rollback()
    
    cur.close()
    conn.close()
    
    print("\nüéØ ESTADO FINAL:")
    print("‚úÖ Base de datos completamente limpia")
    print("‚úÖ Todas las secuencias en 1")
    print("‚úÖ Inserci√≥n de prueba exitosa")
    print("‚úÖ El pr√≥ximo ID de solution deber√≠a ser 1")
    
    print("\nüöÄ AHORA PUEDES:")
    print("1. Reiniciar la aplicaci√≥n web")
    print("2. Cargar una nueva soluci√≥n")
    print("3. Deber√≠a tener ID=1 y archivos ORI1 correctos")
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    if conn:
        conn.rollback()
